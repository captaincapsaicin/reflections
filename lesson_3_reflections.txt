When would you want to use a remote repository rather than keeping all your work local?

When you're collaborating with many people who all need access remotely

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

Changes in the remote repository might break what you're working on, you might need to resolve conflicts at a later time.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

Forks - for copying a project completely and using it as a base for a new (unlinked) project
Clone - for copying (syncing) a project locally for development
Branch - for trying out a new line of development on an existing project (new feature, core rewrite, different user attempts at the same thing), to be discarded or eventually
merged back

What is the benefit of having a copy of the last known state of the remote stored locally?

It allows you to see what is available online for others, and also allows you to pre-emptively fix conflicts

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Well, in the past I've used email to show portions of code. This is much harder to streamline changes that are general to both people working
on the same project (often we have functionally identical solutions, but different code). Good for courses where collaboration can't
be exact, but makes bugs harder to track in other people's code. Is anything easier? There's no overhead to learning git, things aren't
necessarily public if you don't want... Can people ssh to your computer and get your full git history? That would be a good workaround to
having to push and pull from an online source, while keeping version control.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

making changes and working in a separate branch allows you to have total control over the codebase while you work on a new feature, and not
have the rug swept out from under you. Making the person building the new feature, or editing an old one or whatever responsible for compatibility
with changes on the master makes sense as well, as they know what incompatibilities will break their feature or others. Also doing it on another branch
gives other users a chance to review your changes before it gets merged to master (and get pushed to production, for example)
